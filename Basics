# There are many built-in functions in R. Make sure that new object names you assign are not already used by R.
# A simple way of checking this is to type in the name you want to use. If the system returns an error message telling
# you that such object is not found, it is safe to use the name. For example, c (for concatenate) is a 
#built-in function# used to combine elements so NEVER assign c as an object name!

2 + 3*5                        #Note the order of operations.
log(10)                      #Natural logarithm
4^2                    #4 raised to the second power
3/2                    #Division
sqrt(16)               #Square root
abs(3-7)               #Absolute value of 3-7
pi                     #The mysterious number
exp(2)                       #exponential function
15%/%4                         #Integer divide operation
#                      #comment line
x <- log(2.843432)              #assign value to x
floor(x)                 #largest integer less than or equal to x
ceiling(x)             #smallest integer greater than or equal to x
x <-3+2iRe(x)                  # Real part of the complex number x
Im(x)                  # Imaginary part of xy <- 4-5ix+yx*yx <- c(1,3,2,10,5)           #create a vector x with 5 componentsy <- 1:5               #create a vector of consecutive integersy+2                    #scalar addition2*y                          #scalar multiplicationy^2                          #raise each component to the second power2^y                          #raise 2 to the first through fifth powery                            #y itself has not been changedy <-y*2y                            #y is changed nowx <- c(1,3,2,10,5); y <-1:5  #separated two or more statements by semicolonsx+yx*yx/yx^yx <-c(1,3,2,10,5)sum(x)cumsum(x)              #cumulative sum vectordiff(x)                      #first order difference, x_{t}-x_{t-1}diff(x,2)                    # two step difference x_{t}-x_{t-2}diff(diff(x))                #second order differencesort(x)                      #increasing order
sort(x, decreasing=T)        #decreasing order
length(x)              #number of elements in xx[3]                   #the third element of xx[3:5]                       #the third to fifth element of x,x[-2]                  #all except the second elementx[x>3]                       #list of elements in x greater than 3x>3                    #logical operationsas.numeric(x>3)                # logical to numeric conversionsum(x>3)               #number of elements in x greater than 3(1:length(x))[x<=2]          #indices of x whose components are less than or equal to 2z <- as.logical(c(1,0,0,1))  #numeric to logical vector conversion#Assign characteristic vector.colors <- c("green", "blue", "orange", "yellow", "red")#Individual components can be named and referenced by their names.names(x)               #check if any names are attached to xnames(x) <- colors           #assign the names using the character vector colorsxx["green"]             #component reference by its name greennames(x) <- NULL       #names can be removed by assigning NULL#seq() and rep() provide convenient ways to a construct vectors with a certain pattern.seq(10)seq(0, 1, length=10)         #How many subinterval? How many numbers?seq(0, 1, by=0.1)            #How many subinterval? How many numbers?rep(1, 3)c(rep(1, 3), rep(2, 2), rep(-1, 4))rep("Small", 3)c(rep("Small", 3), rep("Medium", 4))rep(c("Low", "High"), 3)#Matricesx <- c(1, 3, 2, 10,5)y <- c(1, 2, 3, 4, 5)m1 <- cbind(x, y)            #combine two vectors in columnst(m1)                        #transposedim(m1)                      #dimension of matrixm2 <- matrix(c(1,3,2,5,-1,2,2,3,9), nrow = 3)m3 <- matrix(c(1,3,2,5,-1,2,2,3,9), ncol = 3, byrow = T)m2[2,3]                          #element of m2 at the second row, third columnm2[2,]                      #second rowm2[,3]                         #third columnm2[-1,]                          #submatrix of m2 without the first rowm2[,-1]                          # submatrix of m2 without the first columnm2[-1,-1]             #submatrix of m2 with the first row and column removed
m1<-matrix(1:4, ncol=2); m2<-matrix(c(10,20,30,40),ncol=2)2*m1             #scalar multiplicationm1+m2              #matrix additionm1*m2              #component-wise multiplication, NOT the usual matrix multiplicationm1%*%m2                  #usual matrix multiplicationsolve(m1)        #inverse matrix 1solve(m1)%*%m1           #check if it is sodiag(3)                #diag() is used to construct a 3x3 identity matrixdiag(c(2,3,3))         #as well as other diagonal matriceseigen(m2)        #Eigenvalues and eigenvectors of matrixx <- c(0,4,15, 1, 6, 3, 20, 5, 8, 1, 3)sort(x)                                 #increasing ordersort(x, decreasing=T)                     #decreasing ordersum(x)mean(x)                           #Meanmedian(x)                         #Medianvar(x)                                  #Variancesd(x)                                   #Standard deviationquantile(x,0.25)                  #25th Percentilequantile(x,c(0,0.25,0.5,0.75,1))summary(x)                              #Five number summaryIQR(x)                                  #InterquatilebasicStats(x)    #More detailed summary, need #to install fBasic package# Generate random number sequences according to different probability density functions.# The functions have the generic structure rfunc(n, par1, par2, ...), where func is the# name of the probability distribution, n is the number of data to generate, and par1, par2, ...# are the values of some parameters of the density function that may be required. For examplernorm(10)#generates 10 random numbers according to standard Normal distribution.rnorm(20, mean = 10, sd = 3)#generates 20 random numbers according to Normal distribution with mean 10 and standard deviation 3.rt(5, df = 10)#generates 5 random numbers according to t-distribution with degree freedom of 10.# Simple Pie Chartslices <- c(10.6,14.7,14.5,5.2,11.2,12.8,3.7,2.4,10.1,14.9)lbls <- c("Arts", "Biology","Business","Education","Engineering","Health","Math","Physical Science","Social Science","Other")
pie(slices, labels = lbls, main="Pie Chart of Field of Study")#If percentages are knownslices <- c(10.6,14.7,14.5,5.2,11.2,12.8,3.7,2.4,10.1,14.9)lbls <- c("Arts", "Biology","Business","Education","Engineering","Health","Math","Physical Science","Social Science","Other")lbls <- paste(lbls, slices) # add percents to labelslbls <- paste(lbls,"%",sep="") # adds % to labelspie(slices,labels = lbls, col=rainbow(length(lbls)),main="Pie Chart of Field of Study")#Pie Chart with percentages when unknownslices <- c(7134,11430,12387,12230,12308,12047,8124)lbls <- c("Sunday", "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")pie(slices, labels = lbls, main="Pie Chart of Days Babies are Born") #This gives the basic pie chartpct <-round(slices/sum(slices)*100,1)lbls <- paste(lbls, pct) # add percents to labelslbls <- paste(lbls,"%",sep="") # adds % to labelspie(slices,labels = lbls, col=rainbow(length(lbls)),main="Pie Chart of Days Babies are Born")# Simple Bar GraphH <- c(2,3,3,3,4,5,5,5,5,6)counts <- table(H)countsbarplot(counts)# More detailed Bar GraphB <- c(3, 2, 25, 37, 22, 34, 19)barplot(B, main="MY NEW BARPLOT", xlab="LETTERS", ylab="MY Y VALUES", names.arg=c("A","B","C","D","E","F","G"))#Histogrammd <- read.csv(file=file.choose(), header=T) #This will pull a data set saved as a .csv file into Rhist(md$tuition, col="green") #Note: argument must match EXACTLY how it is in the data file. This is CASE SENSITIVE.#Stem plotstem(md$tuition)#Time plotplot(md$year,md$tuition) #this gives the time plot with dotsplot(md$year,md$tuition,type='l') #this gives the time plot with the line connecting the dotsplot(md$year,md$tuition,type='l',xlab="Year", ylab="Tuition Cost (in dollars)") #Adds labelsplot(md$year,md$tuition,type='l',xlab="Year", ylab="Tuition Cost (in dollars)",main="Tuition vs. Time") #Includes labels and  title
